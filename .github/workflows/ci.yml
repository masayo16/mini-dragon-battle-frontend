name: CI / CD – mini-dragon-frontend

# ────────────────────────────────────────────────
# ① トリガー
# ────────────────────────────────────────────────
on:
  push:
    branches: [dev, main]
  workflow_dispatch:

# ────────────────────────────────────────────────
# ② 共通設定
# ────────────────────────────────────────────────
env:
  # GitHub Actions Variables（Settings › Actions › Variables）
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  # ╭─────────────────────────────────────────────╮
  # │  build – lint / test / build アーティファクト │
  # ╰─────────────────────────────────────────────╯
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # 👉 OIDC トークン発行に必須
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@8.15.5 --activate
      - run: pnpm --version
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm --version
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: lint / typecheck / test
        run: |
          pnpm run lint
          pnpm type-check
          pnpm test

      - name: Generate .env
        run: |
          cat<<EOF > .env
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          EOF
      - name: Build
        run: pnpm run build
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: .output/public

  # ╭─────────────────────────────────────────────╮
  # │  deploy – S3 sync & CloudFront invalidation │
  # ╰─────────────────────────────────────────────╯
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # ― dev はそのまま、main は Environment “prod” で手動承認 ―
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: .output/public

      # ──────────────────────────────
      # 1) AWS 認証 (OIDC + IAM ロール)
      # ──────────────────────────────
      - name: Debug GitHub OIDC Context
        run: |
          echo "ref: ${{ github.ref }}"
          echo "repository: ${{ github.repository }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ROLE_PROD || secrets.AWS_ROLE_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      # ──────────────────────────────
      # 2) S3 へ同期
      # ──────────────────────────────
      - name: Sync to S3
        run: |
          BUCKET=${{ github.ref == 'refs/heads/main' && vars.S3_BUCKET_PROD || vars.S3_BUCKET_DEV }}
          aws s3 sync .output/public "s3://$BUCKET" --delete --acl private

      # ──────────────────────────────
      # 3) CloudFront キャッシュ無効化
      # ──────────────────────────────
      - name: Invalidate CloudFront
        run: |
          CF_ID=${{ github.ref == 'refs/heads/main' && vars.CF_DIST_ID_PROD || vars.CF_DIST_ID_DEV }}
          aws cloudfront create-invalidation \
            --distribution-id "$CF_ID" \
            --paths "/*"

      # ──────────────────────────────
      # 4) 成果物 URL を出力 (オプション)
      # ──────────────────────────────
      - name: Set output URL
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "url=https://mini-dragon-battle.com" >> "$GITHUB_OUTPUT"
          else
            echo "url=https://dev.mini-dragon-battle.com" >> "$GITHUB_OUTPUT"
          fi
